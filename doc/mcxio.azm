\import{mcx.zmm}

\begin{pud::man}{

   {name}{mcxio}
   {html_title}{The mcl matrix format specification}
   {author}{Stijn van Dongen}
   {section}{5}
   {synstyle}{long}
   {defstyle}{long}

   \man_share
}

\:   Other information can be stored in the header, \mcl cares only about
\:   keys it recognizes. Note that other keys might become meaningful in
\:   the future though.

\:    stretch over more than one line.

\sec{*}{name}{NAME}
\NAME{mcxio}{the format specifications for input and output in the mcl family.}


\sec{*}{description}{DESCRIPTION}
\car{
   The primary objects in the MCL network analysis suite are graphs and
   clusterings. Graphs can be directed and may have loops.  Both graphs and
   clusterings are represented in a general unified format. This format
   specifies two domains (a \it{source domain} and a \it{destination domain}),
   along with lists of arcs linking pairs of elements from the two domains.
   For graphs the two domains are simply both equal to the graph node domain, whereas for
   clusterings one domain is the graph node domain and the other corresponds to
   the enumeration of clusters. Undirected graphs are a special instance of
   a directed graph, where an edge from the undirected graph is represented
   by two arcs of identical weight, one for each possible direction.
   }

\par{
   The general unified format alluded to above is in fact
   a simple rectangular sparse matrix representation.
   Sparse means that zero entries in the matrix are not stored.
   A zero entry corresponds to an ordered node pair in the graph
   for which no arc exists from the first to the second node.
   An undirected graph corresponds with a symmetric matrix.
   }

\par{
   The MCL suite uses a slight generalisation of the matrix concept, in
   that the row and column indices (that is, domains) can be arbitrary
   lists of nonnegative integers. Usually, but not necessarily, a domain
   of size\~\v{N} will use the common representation of the list
   of integers starting at\~\v{0} and ending at \~\v{N-1}.
   The \it{source domain} is always associated with the columns of
   a matrix, and the \it{destination domain} is always associated
   with the rows of a matrix. The matrix format, introduced below,
   first specifies the two domains. It then represents the nonzero matrix
   entries (corresponding with graph arc weights) in a column-wise
   fashion, as a list of lists. For each node from the source domain,
   it presents the list of all its neighbours in the destination domain
   along with the corresponding weights.
   This document describes
   }
   
\begin{itemize}{\mcx_itemopts}
\item{\it{native matrix format}}
\car{
   The format that can be read in by any mcl application
   expecting a matrix argument. The native format closely resembles
   the layout of matrices as residing in computer memory. There are
   two distinct encodings, respectively \it{interchange} and \it{binary}.
   Their relative merits are described further below.
   }

\item{\it{concatenated native matrix format}}
\car{
   This always pertains to matrices in native format concatenated in a single
   file, refered to as a \it{cat file}.  It is used for example to encode
   hierarchical clusterings as generated by \mclcm.  A cat file either
   consists of matrices in interchange format or of matrices in binary format.}

\item{\it{raw intermediate format}}
\car{
   This is read by \mysib{mcxassemble}.}
\""{
   The two formats (native and raw) are in fact
   identical at the vector level; they are distinguished by the error reporting
   implied by the native format.}

\item{\it{tab format}}
\car{
   Used by applications such as \mysib{mcl} and \mysib{mcxdump} to
   convert between meaningful labels describing the input data and the
   numerical identifiers used internally.}

\item{\it{label format}}
\car{
   The format used when streaming labels directly into
   \mysib{mcl} or \mysib{mcxload}.}

\item{\it{transformation syntax}}
\car{
   The syntax accepted by \mysib{mcl}, \mysib{mcxalter} and
   many other programs to transform graphs and matrices.}

\end{itemize}

\par{
   The interchange format is a portable format that can be transmitted
   across computers and over networks and will work with any version
   of mcl or its sibling programs. It is documented (here) and very stable.
   Applications can easily create matrices in this format.
   The drawback of interchange format is that for very large graphs
   matrix encodings grow very big and are slow to read.}

\par{
   The binary format is \it{not} garantueed to be portable across
   machines or different versions of mcl or differently compiled
   versions of mcl. Its distinct advantage is that for very large
   graphs the speed advantage over interchange format is dramatic.}

\par{
   Conversion between the two formats is easily achieved with
   \mcxconvert. Both \mysib{mcl} and \mysib{mcxload}
   can save a matrix in either format after constructing it from
   label input.}

\par{
   The concatenated format is generated e.g. by \mysib{mclcm} and can
   be transformed by \mysib{mcxdump} using the \genopt{-imx-cat}
   option. In cat format matrices are simply concatenated,
   so it is easily generated from the command line if needed.
   For native binary format it is imperative that no additional
   bytes are inserted inbetween the matrix encodings. For native
   interchange format the only requirement is that the last
   matrix is followed by nothing but white space.}

\par{
   A remark on the sloppy naming conventions used for \mcl and its sibling
   utilities may be in order here.  The prefix \bf{mcx} is used for generic
   matrix functionality, the prefix \bf{clm} is used for generic cluster
   functionaliy.  The \it{utility} \mcx is a general purpose interpreter for
   manipulating matrices (and grahps, sets, and clusterings).  The set of all
   \mcl siblings (cf. \mysib{mclfamily}) is loosely refered to as the mcl
   family, which makes use of the mcl libraries (rather than the mcx
   libraries). The full truth is even more horrible, as the mcl/mcx prefix
   conventions used in the C source code follow still other rules.}

\par{
   In this document, 'MCL' means 'the mcl setting' or 'the mcl family'.  An MCL
   program is one of the programs in the mcl family.  The remainder of this
   document contains the following sections.}

\${html}{\"pud::man::maketoc"}

\sec{internal}{Internal representation of matrices in MCL}

\par{
   There are several aspects to the way in which MCL represents matrices.
   Internally, indices never act as an ofset in an array, and neither do they
   participate in ofset computations.  This means that they purely act as
   identifiers.  The upshot is that matrices can be handled in which the index
   domains are \it{non-sequential} (more below).  Thus one can work with
   different graphs and matrices all using subsets of the same set of
   indices/identifiers. This aids in combining data sets in different ways and
   easily comparing the respective results when experimenting.  Secondly, only
   \it{nonzero values} (and their corresponding indices) are stored.  Thirdly,
   MCL stores a matrix as a listing of columns. Iterating over a column is
   trivial; iterating over a row requires a costly transposition computation.
   The last two points should matter little to the user of MCL programs.}

\par{
   In textbook expositions and in many matrix manipulation implementations,
   matrices are represented with sequentially indexed rows and columns, with
   the indices usually starting at either zero or one.  In the MCL setting, the
   requirement of sequentiality is dropped, and it follows naturally that no
   requirement is posed on the first index.  The only requirement MCL poses on
   the indices is that they be nonnegative, and can be represented by the
   integer type used by MCL. On many machines, the largest allowable integer
   will be 2147483647.}

\par{
   MCL associates two domains with a matrix\~\v{M}, the row domain and column
   domain.  The matrix\~\v{M} can only have entries\~\v{M[i,j]} where\~\v{i} is
   in the row domain and\~\v{j} is in the column domain. This is vital when
   specifying a matrix: it is illegal to specify an entry\~\v{M[i,j]} violating
   this condition.  However, it is not necessary to specify \it{all}
   entries\~\v{M[i,j]} for all possible combinations of\~\v{i} and\~\v{j}.  One
   needs only specify those entries for which the value is nonzero, and only
   nonzero values will be stored internally. In the MCL matrix format, the
   matrix domains must be specified explicitly if they are not canonical (more
   below).}

\par{
   \bf{Strictly as an aside}, the domains primarily exist to ensure data
   integrity.  When combining matrices with addition or multiplication (e.g.
   using the \mcx utility), MCL will happily combine matrices for which the
   domains do not match, although it will usually issue a warning.
   Conceptually, matrices auto-expand to the dimensions required for the
   operation.  Alternatively, a matrix can be viewed as an infinite quadrant,
   with the domains delimiting the parts in which nonzero entries may exist.
   In the future, facilities could be added to MCL (c.q. \mcx) to allow for
   placing strict domain requirements on matrices when submitted to binary
   operations such as addition and multiplication.}

\sec{mspec}{Specifying matrices}
\par{
   From here on, all statements about matrices and graphs are really statements
   about matrices and graphs \it{in the MCL setting}.  The \it{specification}
   of a matrix quite closely matches the internal representation.}

\par{
   A matrix M has two domains: the column domain and the row domain.  Both
   simply take the form of a set (represented as an ordered list) of indices. A
   \it{canonical domain} is a domain of some size \v{K} where the indices are
   simply the first \v{K} nonnegative integers \v{0,1..,K-1}.  The domains
   dictate which nonzero entries are allowed to occur in a matrix; only entries
   M[i,j] are allowed where i is in the row domain and j is in the column
   domain.}

\par{
   The matrix M is specified in three parts, for which the second is optional.
   The parts are:}

\begin{itemize}{\mcx_itemopts}
\item{Header specification}
\car{
   This specifies the dimensions K and L of the matrix, where K is the
   size of the row domain, and L is the size of the column domain.
   It looks as follows:}
\verbatix{\:/
(mclheader
mcltype matrix
dimensions 9x14
)}
\car{
   This dictates that a matrix will be specified for which the row
   domain has dimension 9 and the column domain has dimension 14.
}


\item{Domain specification}
\car{
   The domain specification can have various forms: if nothing is specified,
   the matrix will have canonical domains and a canonical representation,
   similar to the representation encountered in textbooks.  Alternatively, the
   row and column domains can each be specified separately, and it is also
   possible to specify only one of them; the other will simply be a canonical
   domain again. Finally, it is possible to declare the two domains identical
   and specify them simultaneously.  It is perfectly legal in each case to
   explicitly specify a canonical domain.  It is \it{required} in each case
   that the number of indices listed in a domain corresponds with the dimension
   given in the header.}

\par{
   An example where both a row domain and a column domain are specified:}
\verbatix{\:/
(mclrows
 100 200 300 400 500 600 700 800 900 $
)
(mclcols
 30 32 34 36 38 40 42 44 46 48 50 52 56 58 $
)}
\car{
   This example combines with the header given above, as the dimensions fit.
   Had the row domain specification been omitted, the row domain would
   automatically be set to the integers \v{0,1,..8}. Had the column
   specification been omitted, it would be set to \v{0,1,..13}.}

\par{
   Suppose now that the header did specify the dimensions 10x10.
   Because the dimensions are identical, this raises the possibility
   that the domains be identical.
   A valid way to specify the row domain and column domain in one go is this.}
\verbatix{\:/
(mcldoms
 11 22 33 44 55 66 77 88 99 100 $
)}

\item{Matrix specification}
\car{
   The matrix specification starts with the sequence}
\verbatix{\:/
(mclmatrix
begin}
\car{
   The 'begin' keyword in the '(mclmatrix' part is followed by a list of
   listings, where the primary list ranges over all column indices in M (i.e.
   indices in the column domain), and where each secondary lists encodes all
   positive entries in the corresponding column. A secondary list (or matrix
   column) starts with the index c of the column, and then contains a listing
   of all row entries in c (these are matrix entries M[r,c] for varying r). The
   entry M[r,c] is specified either as 'r' or as 'r:f', where f is a float. In
   the first case, the entry M[r,c] defaults to 1.0, in the second case, it is
   set to f. The secondary list is closed with the `$' character.  A full
   fledged examples thus looks as follows:}

\verbatix{\:/
(mclheader
mcltype matrix
dimensions 12x3
)
(mclrows
 11 22 33 44 55 66 77 88 99 123 456 2147483647 $
)
(mclcols
  0  1  2 $
)
(mclmatrix
begin
0    44 88 99 456 2147483647 $
1    11 66 77 123 $
2    22 33 55 $
)}

\car{
   Note that the column domain is canonical; its specifiation could have been
   omitted. In this example, no values were specified. See below for more.}

\end{itemize}

\sec{gspec}{Specifying graphs}

\car{
   A graph is simply a matrix where the row domain is the same as the column
   domain.  Graphs should have positive entries only. Example:}
\verbatix{\:/
(mclheader
mcltype matrix
dimensions 12x12
)
(mcldoms
11 22 33 44 55 66 77 88 99 123 456 2147483647 $
)
(mclmatrix
begin
11    22:2  66:3.4  77:3  123:8 $
22    11:2  33:3.8  55:8.1 $
33    22:3.8  44:7  55:6.2 $
44    33:7  88:5.7  99:7.0 456:3 $
55    22:8.1  33:6.2  77:2.9  88:3.0 $
66    11:3.4  123:5.1 $
77    11:3  55:2.9  123:1.5 $
88    44:5.7  55:3.0  99:3.0 456:4.2 $
99    44:7.0  88:3.0 456:1.8 2147483647:3.9 $
123   11:8  66:5.1  77:1.5 $
456   44:3  88:4.2  99:1.8 2147483647:6.3 $
2147483647   99:3.9 456:6.3 $
)}
\car{
   Incidentally, clustering this graph with mcl, using default parameters,
   yields a cluster that is represented by the 12x3 matrix shown earlier.}

\par{
   The following example shows the same graph, now represented on a
   canonical domain, and with all values implicitly set to 1.0:}

\verbatix{\:/
(mclheader
mcltype matrix
dimensions 12x12
)
(mclmatrix
begin
0    1  5  6  9 $
1    0  2  4 $
2    1  3  4 $
3    2  7  8 10 $
4    1  2  6  7 $
5    0  9 $
6    0  4  9 $
7    3  4  8 10 $
8    3  7 10 11 $
9    0  5  6 $
10   3  7  8 11 $
11   8 10 $
)}

\cpar{Additional notes}{
   There are few restrictions on the format that one might actually expect.
   Vectors and entries may occur in any order and need not be sorted.
   Repeated entries and repeated vectors are allowed but are always
   discarded while an error message is emitted.}

\par{
   If you want \it{functionally interesting behaviour} in combining
   repeated vectors and repeated entries, have a look at the next section
   and at \mysib{mcxassemble}.}

\par{
   Within the vector listing, the '#' is a token that introduces
   a comment until the end of line.}

\sec{raw}{Raw format}

\par{
   A file in \it{raw format} is simply a listing of vectors without any
   sectioning structure.  No header specification, no domain specification, and
   no matrix introduction syntax is used - these are supplied to the processing
   application by other means.  The end-of-vector token '$' must still be used,
   and the comment token '#' is still valid. \mysib{mcxassemble}
   imports a file in raw
   format, creates a native matrix from the data therein, and writes the
   matrix to (a different) file.  It allows customizable behaviour in how to
   combine repeated entries and repeated vectors. This is typically used in the
   following procedure. A) Do a one-pass-parse on some external cooccurrence
   file/format, generate raw data during the parse and write it to file
   (without needing to build a huge data structure in memory).  B) mcxassemble
   takes the raw data and assembles it according to instruction into a native
   mcl matrix.}


\sec{tab}{Tab format / label information}
\car{
   Several mcl programs accept options such as \genopt{-tab}, \genopt{-tabc},
   \genopt{-tabr}, \genopt{-use-tab}, \genopt{-strict-tab},
   and \genopt{-extend-tab}.

   The argument to these options is invariably the name of
   a so-called \it{tab file}.
   Tab files are used to convert between labels (describing entities
   in the data) and indices as used in the mcl matrix format.

   In a tab file each line starts with a unique number which presumably
   corresponds to an index used in a matrix file.

   The rest of the line contains a
   descriptive string associated with the number. It is required
   that each string is unique, although not all mcl programs enforce
   this at the time of writing.
   The string may contain spaces.

   Lines starting with
   \v{#} are considered comment and are disregarded.
}

\cpar{Tab domain}{The ordered set of indices found in the tab file
is called the \it{tab domain}.}

\par{
   Tab files are almost always employed in conjunction with an mcl matrix file.
   \mysib{mcxdump} and \mysib{clmformat} require by
   default that the tab domain coincides with the matrix domain (either row or
   column or both) to which they will be applied. This can be relaxed for
   either by supplying the \useopt{--lazy-tab} option.}

\par{
   mcl provides explicit modes for dealing with tab structures by means of
   the \genopt{-extend-tab}, \genopt{-restrict-tab} and
   \genopt{-strict-tab} options. Refer to the \mysib{mcl}
   documentation.}

\sec{label}{Label input}
\car{
   Label input is a line based input where two nodes and an optional value are
   specified on each line. The nodes should be specified by labels. If the
   labels contain spaces they should be separated by tabs (and the value if
   present should be separated from the second label by a tab as well). The
   parse code will assume tab-separated labels if it sees a tab character in
   the input, otherwise it will split the input on any kind of whitespace.
   Any line where the first non-whitespace character is the octothorp (#) is
   ignored.  The following is an example of label input.}

\verbatim{---8<------8<------8<------8<------8<---
# the cat and the hat example
cat hat  0.2
hat bat  0.16
bat cat  1.0
bat bit  0.125
bit fit  0.25
fit hit  0.5
hit bit  0.16
--->8------>8------>8------>8------>8---}

\car{
   \mysib{mcl} can read in label input and cluster it when it is
   given the \genopt{--abc} option. It can optionally save
   the input graph in native format and save the label information
   in a tab file with the \genopt{-save-graph} and \genopt{-save-tab}
   options.}

\par{
   Refer to the \sibref{mcl}{started}{MCL getting started} and
   \sibref{mcl}{examples}{MCL manual examples} sections
   for more information on how MCL deals with label input.}

\par{
   \mysib{mcxload} is a general purpose program for reading
   in label data and other stream formats. It
   encodes them in native mcl format and tab files.
   It allows intermediate transformations on the values.}

\sec{trans}{Transformation syntax}
\car{
   \mysib{mcl}, \mysib{mcxload}, \mysib{mcxsubs}, \mysib{mcxassemble}
   and \mysib{mcxalter}
   all accept the same transformation language in their
   respective \bf{tf}-type options and mcxsub's \bf{val}
   specification.}

\par{
   A statement in this language is simply a comma-separated
   list of functions accepting a single numerical value.
   The syntax of a function invocation in general is
   \bf{func}(\it{arg}).
   The functions \bf{exp}, \bf{log}, \bf{neglog} can
   also be given an empty parameter list, indicating that
   \it{e} is taken as the exponent base. In this case,
   the invocation looks like \bf{func}().
   Functions with names that start with \v{#} operate
   on graphs in their entirety. For example, \v{#knn(50)}
   indicates the k-Nearest Neighbour transformation for
   \v{k=50}.
   All other names encode functions that operate
   directly on edges.
   Functions with names that start with \v{#arc} operate
   on directed graphs and yield directed graphs.
   Most of the other \v{#} functions either expect
   an undirected graph (such as \v{#knn()}) or yield
   an undirected graph (such as \v{#add()} and \v{#max()}.
   The following are supported.
   }

\begin{itemize}{
   {textindent}{9}
   {flow}{compact}
   {align}{left}
}
\item{lt}   Filter out values greater than or equal to arg.
\item{lq}   Filter out values greater than arg.
\item{gq}   Filter out values less than arg.
\item{gt}   Filter out values less than or equal to arg.
\item{ceil} Set everything higher than arg to arg.
\item{floor} Set everything lower than arg to arg.
\item{mul}  Multiply by arg.
\item{add}  Add arg to it.
\item{power}   Raise to power arg.
\item{exp}     Raise arg (\it{e} if omitted) to value.
\item{log}     Take log in base arg (\it{e} if omitted).
\item{neglog}  Take minus log in base arg (\it{e} if omitted).

\itemskip

\item{#knn}    k-Nearest Neighbour reduction with \v{k=arg}.
\item{#ceilnb} Cap neighbours at arg at most.
\item{#mcl}    Cluster with inflation=arg, use induced graph.
\item{#add}    Convert two arcs to one edge using addition.
\item{#min}    Convert two arcs to one edge using minimum.
\item{#max}    Convert two arcs to one edge using maximum.
\item{#mul}    Convert two arcs to one edge using multiplication.
\item{#rev}    Encode graph in reverse direction.
\item{#tp}     Same as above in matrix speak (\it{t}rans\it{p}ose).
\item{#tug}    Perturb edge weights with factor arg.
\item{#shrug}  Randomly perturb edge weights with factor arg.
\item{#step}   Use the k-step relation, where \v{k=arg}.
\item{#thread} Set thread pool size to arg.

\itemskip

\item{#arcmax} Only keep largest arc between two nodes.
\item{#arcsub} Replace G by G - G^T.
\item{#arcmcl} As \v{#mcl}, use symmetrised graph for clustering.

\end{itemize}

\cpar{NOTE}{
   \mysib{mcl} accepts \genopt{--abc-neg-log} and \genopt{--abc-neg-log10}
   to specify log transformations. Similarly, \mysib{mcxload} accepts
   \genopt{--stream-log}, \genopt{--stream-neg-log}, and
   \genopt{--stream-neg-log10}.  The reason is that probabilities are sometimes
   encoded below the precision dictated by the IEEE (32 bit) float
   specification.  This poses a problem as the mcl applications encode values
   by default as floats, and the transformation specifications are always
   applied to the mcl encoding. The options just mentioned are applied after a
   value has been read from an input stream and \it{before} it is converted to
   the native encoding.
   }

\sec{seealso}{SEE ALSO}
\car{
   \mysib{mcxassemble},
   and \mysib{mclfamily} for an overview of all the documentation
   and the utilities in the mcl family.}

\sec{author}{AUTHOR}
\car{
   Stijn van Dongen.}

\end{pud::man}

